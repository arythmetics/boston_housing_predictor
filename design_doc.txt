Initial design specifications:
- JSON input of house specifications
- Dockerized
- curl testable API w/ Fast API
- Log of model accuracy with MLFlow
- Automatic numbered model artifact storage with comparison
- Hash table with stored predictions

References:
https://github.com/cosmic-cortex/fastAPI-ML-quickstart
https://machinelearningmastery.com/pytorch-tutorial-develop-deep-learning-models/


FastAPI over Flask
Reasons for:
- This is a microservice not a full blown application. FastAPI is a leaner tool for that specific purpose.
- Can be integrated with Pydantic for user input data validation.
- Has performance similar to high-speed web APIs in Node or Go
Reasons against:
- Flask is a far more mature tool than FastAPI. This means support and information is far more rich for Flask over FastAPI.

Request Datatype in CSV vs JSON
- Would've preferred both
- CSV needs to be read in as SpooledTemporaryFile, which has a read error when 
attempting to be accessed by certain modules (in this case pandas)
- Left it as a TODO for a future version of this microservice

Model Class Abstraction
- Decided to create a universal Model class that would arbitrate between detailed model code and the API,
- Reason was to make it easy for new models to be swapped in by only editing one file.

Future Improvements
- Allow user input to include multiple observations, not just one.
- Create option to switch between Flask and FastAPI.
- Generalize nn.py so that neural networks can be swapped out as easily as the Model class in model.py
